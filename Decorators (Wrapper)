print()

print("--------------------------------  0.  ------------------------------------------------------")

def my_decorator(func):
    def wrapper():
        print("Something is happening before the function is called.")
        func()
        print("Something is happening after the function is called.")
    return wrapper

@my_decorator
def say_whee():
    print("Whee!")

# print(type(say_whee))
# print(type(1))

#say_whee = my_decorator(say_whee) #is the same as the decorator

say_whee()

print("--------------------------------  1.  ------------------------------------------------------")

from datetime import datetime
def not_during_the_night(func):
    def wrapper():
        if 12 <= datetime.now().hour < 22:
            func()
        else:
            pass  # Hush, the neighbors are asleep
    return wrapper

@not_during_the_night
def say_whee():
    print("Whee!")

say_whee()

print("--------------------------------  2.  ------------------------------------------------------")

import functools

def do_twice(func):
    @functools.wraps(func)
    def wrapper(*args):
        K = func(*args)
        print (K)
        K = func(*args)
        print (K)

    return wrapper

@do_twice
def return_greeting(*args):
    print("creating greeting")
    return ",".join(args)

return_greeting("Mahindra", "Raju")

print(type(return_greeting))

print("--------------------------------  3.  ------------------------------------------------------")

""" do twice using *args """

def do_twice(func):
    def wrapper(*args, **kwargs):
        K = func(*args, **kwargs)
        print (K)
        K = func(*args, **kwargs)
        print (K)

    return wrapper

@do_twice
def return_greeting(*args, **kwargs):
    print("Creating greeting")
    for i in args:
        print (i)
    for key,value in kwargs.items():
        print (key, "--",value)
    return "Lite le ra"

return_greeting("Mahindra", "Raju", Name = "Kanna", Age = 17)

print("---3a---")

return_greeting("Mahindra", "Raju", **{"Name" : "Kanna", "Age" : 17})

print ("--------------------------------  4.  ------------------------------------------------------")

import functools
import time

def timer(func):
    """Print the runtime of the decorated function"""
    @functools.wraps(func)
    def wrapper_timer(*args, **kwargs):
        start_time = time.perf_counter()    # 1
        value = func(*args, **kwargs)
        end_time = time.perf_counter()      # 2
        run_time = end_time - start_time    # 3
        print(f"Finished {func.__name__!r} in {run_time:.4f} secs")
        print(value)
        #return value
    return wrapper_timer

@timer
def waste_some_time(num_times):
    i = 0
    for _ in range(num_times):
       i = sum([i**2 for i in range(10)])
    return i

waste_some_time(99)


print ("--------------------------------  5.  ------------------------------------------------------")

import functools

def debug(func):
    """Print the function signature and return value"""
    @functools.wraps(func)
    def wrapper_debug(*args, **kwargs):
        args_repr = [repr(a) for a in args]                      # 1
        #print(args_repr)
        kwargs_repr = [f"{k}={v}" for k, v in kwargs.items()]    # 2
        #print(kwargs_repr)
        signature = ", ".join(args_repr + kwargs_repr)           # 3
        # print(signature)
        print(f"Calling {func.__name__!r}({signature})")
        value = func(*args, **kwargs)
        print(f"{func.__name__!r} returned {value!r}")           # 4
        return value

    return wrapper_debug

@debug
def make_greeting(name, age=None):
    if age is None:
        return f"Howdy {name}!"
    else:
        return f"Whoa {name}! {age} already, you are growing up!"

make_greeting("Benjamin", age = 17)

print ("--------------------------------  6.  ------------------------------------------------------")

import math

# Apply a decorator to a standard library function


math.factorial = debug(math.factorial)

def approximate_e(terms=18):
    return sum(1 / math.factorial(n) for n in range(terms))

print(approximate_e(5))


print ("--------------------------------  7.  ------------------------------------------------------")

import random
PLUGINS = dict()

def register(func):
    """Register a function as a plug-in"""
    PLUGINS[func.__name__] = func
    return func

@register
def say_hello(name):
    return f"Hello {name}"

@register
def be_awesome(name):
    return f"Yo {name}, together we are the awesomest!"

def randomly_greet(name):
    greeter, greeter_func = random.choice(list(PLUGINS.items()))
    #print(list(PLUGINS.items()))
    print(f"Using {greeter!r}")
    return greeter_func(name)

randomly_greet("Kumar")
